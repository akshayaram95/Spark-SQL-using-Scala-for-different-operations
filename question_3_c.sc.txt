val data1 = sc.textFile("/FileStore/tables/movies.csv")
val header1 = data1.first()
val movies = data1.filter(row => row != header1).map(_.split(",").map(_.trim)).map(e=>(e(0),e(1)))

val data2 = sc.textFile("/FileStore/tables/ratings.csv")
val header2 = data2.first()
val ratings= data2.filter(row => row != header2).map(_.split(",").map(_.trim)).map(e=>(e(1),e(2).toFloat))

val data3 = sc.textFile("/FileStore/tables/tags.csv")
val header3= data3.first()
val tags= data3.filter(row => row != header3).map(_.split(",").map(_.trim)).map(e=>(e(1),e(2)))

val joined = movies.join(ratings).join(tags).filter{case (a,((b,c),d)) => d.toLowerCase().contains("action")}
joined.collect()
val local_value_joined = joined.map(v =>( v._2._1._1, v._2._1._2))
local_value_joined.collect()

dbutils.fs.rm("/question_3_c",true)

val averages = local_value_joined.aggregateByKey((0,0.0))((t,e) => (t._1 + 1, t._2 + e),
        (t1,t2) => (t1._1 + t2._1, t1._2 + t2._2)).mapValues(t => t._2/t._1)
val solution_c=averages.map(e=>(e._1+"\t"+e._2+"\t")).repartition(1).saveAsTextFile("/question_3_c")
dbutils.fs.cp("/question_3_c/part-00000","dbfs:/FileStore/tables/output_q3_c.txt",true)